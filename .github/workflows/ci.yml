name: CI Pipeline

on:
  push:
    branches: 
      - main
      - master
      - develop
      - 'sprint/**'
  pull_request:
    branches: 
      - main
      - master
      - develop

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  # Job para verificar mudanÃ§as e determinar quais jobs executar
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v3
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'package.json'
            backend:
              - 'backend/**'
              - 'database/**'
              - 'package.json'
            docker:
              - 'docker-compose.yml'
              - 'Dockerfile*'

  # Lint & Format Check
  lint:
    runs-on: ubuntu-latest
    needs: check-changes
    strategy:
      matrix:
        project: [frontend, backend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './${{ matrix.project }}/package-lock.json'
      
      - name: Check if project exists
        id: check_project
        run: |
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::notice::${{ matrix.project }} not yet implemented"
          fi
      
      - name: Install dependencies
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm ci || npm install
      
      - name: Run ESLint
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm run lint || echo "Lint script not configured yet"
        continue-on-error: true
      
      - name: Check Prettier formatting
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm run format:check || echo "Format check not configured yet"
        continue-on-error: true

  # Build
  build:
    runs-on: ubuntu-latest
    needs: check-changes
    strategy:
      matrix:
        project: [frontend, backend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './${{ matrix.project }}/package-lock.json'
      
      - name: Check if project exists
        id: check_project
        run: |
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::notice::${{ matrix.project }} not yet implemented"
          fi
      
      - name: Install dependencies
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm ci || npm install
      
      - name: Build project
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm run build || echo "Build script not configured yet"
        continue-on-error: true
      
      - name: Upload build artifacts
        if: steps.check_project.outputs.exists == 'true' && matrix.project == 'frontend'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-build
          path: ./${{ matrix.project }}/dist/
          retention-days: 7

  # Unit Tests
  test-unit:
    runs-on: ubuntu-latest
    needs: [check-changes, lint]
    strategy:
      matrix:
        project: [frontend, backend]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './${{ matrix.project }}/package-lock.json'
      
      - name: Check if project exists
        id: check_project
        run: |
          if [ -d "${{ matrix.project }}" ] && [ -f "${{ matrix.project }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::notice::${{ matrix.project }} not yet implemented"
          fi
      
      - name: Install dependencies
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        run: npm ci || npm install
      
      - name: Run unit tests
        if: steps.check_project.outputs.exists == 'true'
        working-directory: ./${{ matrix.project }}
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/test_db
          REDIS_HOST: localhost
          NODE_ENV: test
        run: npm test || echo "Test script not configured yet"
        continue-on-error: true
      
      - name: Upload coverage reports
        if: steps.check_project.outputs.exists == 'true'
        uses: codecov/codecov-action@v3
        with:
          directory: ./${{ matrix.project }}/coverage
          flags: ${{ matrix.project }}
          fail_ci_if_error: false

  # E2E Tests (Playwright)
  test-e2e:
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.check-changes.outputs.frontend == 'true' || needs.check-changes.outputs.backend == 'true'
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Check if tests exist
        id: check_tests
        run: |
          if [ -d "ops/tests/playwright" ] && [ -n "$(ls -A ops/tests/playwright 2>/dev/null)" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::notice::E2E tests not yet implemented"
          fi
      
      - name: Install Playwright
        if: steps.check_tests.outputs.exists == 'true'
        run: |
          npm install -g playwright
          npx playwright install chromium
      
      - name: Start services with Docker Compose
        if: steps.check_tests.outputs.exists == 'true'
        run: |
          docker compose up -d postgres redis minio
          sleep 10
      
      - name: Run E2E tests
        if: steps.check_tests.outputs.exists == 'true'
        run: npx playwright test --project=chromium || echo "No E2E tests configured yet"
        continue-on-error: true
      
      - name: Upload test results
        if: steps.check_tests.outputs.exists == 'true' && always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
      
      - name: Stop services
        if: always()
        run: docker compose down

  # Security Check
  security:
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check npm audit
        run: |
          for dir in frontend backend; do
            if [ -d "$dir" ] && [ -f "$dir/package.json" ]; then
              echo "Checking $dir for vulnerabilities..."
              cd $dir
              npm audit --audit-level=high || true
              cd ..
            fi
          done

  # Docker Build Check
  docker-build:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.docker == 'true'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Validate docker-compose
        run: docker compose config
      
      - name: Build Docker images
        run: |
          docker compose build postgres redis minio || true
          echo "::notice::Application containers will be built in future sprints"

  # Final Status Check
  ci-status:
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, security]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "CI Pipeline completed!"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ] || \
             [ "${{ needs.test-unit.result }}" == "failure" ]; then
            echo "::warning::Some checks failed, but this is expected in early development"
          else
            echo "::notice::All checks passed or skipped successfully!"
          fi
