# Project Manual XML Atualizado - Support Chat B2B

Baseado na fusão das regras do `agent-rules.md` com o `project-manual.xml` original:

```xml
<?xml version="1.0" encoding="utf-8"?>
<project-manual>
  <meta>
    <project-name>Support Chat B2B (Brasil)</project-name>
    <purpose>
      Desenvolvimento completo de sistema de chat de suporte B2B (web) com:
      Login multi-tenant (empresa cliente + atendente), filas, transferências,
      histórico exportável, gravação/upload de arquivos e áudio, painel de gerência,
      métricas, segurança/LGPD.
    </purpose>
    <primary-stack>
      <frontend>Next.js (React) + shadcn/ui + Tailwind</frontend>
      <backend>NestJS (Node.js) + Socket.IO</backend>
      <database>MariaDB - Prisma ORM</database>
      <realtime>Socket.IO</realtime>
      <tests>Playwright (E2E) + Jest (unit)</tests>
      <ci>GitHub Actions</ci>
      <container>Docker / docker-compose</container>
      <mcp-providers>
        <mcp>filesystem</mcp>
        <mcp>github</mcp>
        <mcp>context7</mcp>
        <mcp>playwright</mcp>
        <mcp>manual-xml</mcp>
      </mcp-providers>
    </primary-stack>
    <agent-contract>
      <always-read>manual-xml (this file) before starting any task</always-read>
      <consult>context7 MCP for any uncertain library usage, API signature or best practice before coding</consult>
      <inspect>filesystem MCP to list/validate files and the /tasks directory before edits</inspect>
      <test>use playwright MCP for UI flows after implementation</test>
      <commit>use github MCP for commits/branches/PRs</commit>
      <update-root-readme>update README.md at project root after each task/sprint</update-root-readme>
    </agent-contract>
  </meta>

  <!-- AGENT RULES MESCLADAS - Regras Obrigatórias para o Agente -->
  <agent-rules>
    <!-- Uso Obrigatório dos MCPs -->
    <mcp-usage>
      <filesystem>
        <rule priority="critical">SEMPRE usar filesystem MCP para ler e editar código</rule>
        <rule priority="critical">Antes de editar qualquer arquivo, SEMPRE use `read_files` para ler o conteúdo atual</rule>
        <rule priority="critical">Use `find_files` para descobrir estrutura de diretórios e arquivos existentes</rule>
        <rule priority="critical">Use `edit_files` para fazer alterações, nunca assuma o conteúdo dos arquivos</rule>
        <workflow>
          <step>1. find_files para localizar arquivos</step>
          <step>2. read_files para ler conteúdo atual</step>
          <step>3. edit_files para aplicar mudanças</step>
        </workflow>
      </filesystem>

      <context7>
        <rule priority="critical">SEMPRE usar context7 MCP para documentação</rule>
        <rule priority="critical">Consulte context7 para qualquer uso de biblioteca incerto</rule>
        <rule priority="critical">Verifique melhores práticas e APIs antes de implementar</rule>
        <rule priority="critical">Use para descobrir versões atualizadas e métodos corretos</rule>
        <available-contexts>
          <context>/nestjs/docs.nestjs.com - Documentação NestJS</context>
          <context>/prisma/www.prisma.io - Documentação Prisma</context>
          <context>/nextjs/nextjs.org - Documentação Next.js</context>
          <context>/mariadb/mariadb.com - Documentação MariaDB</context>
        </available-contexts>
      </context7>

      <github>
        <rule priority="critical">SEMPRE usar github MCP para versionamento</rule>
        <rule priority="critical">Use comandos git através do github MCP quando disponível</rule>
        <rule priority="critical">Crie branches seguindo a convenção: `sprint/S{S}_task_T{S}.{NNN}-{short-desc}`</rule>
        <rule priority="critical">Commits devem seguir formato: `[S{S}][T{S}.{NNN}] - descrição`</rule>
        <rule priority="critical">Sempre faça push das alterações para o repositório remoto</rule>
      </github>

      <manual-xml>
        <rule priority="critical">SEMPRE usar manual-xml MCP</rule>
        <rule priority="critical">Leia o project-manual.xml antes de iniciar qualquer tarefa</rule>
        <rule priority="critical">Siga estritamente as convenções definidas no manual</rule>
        <rule priority="critical">Use as definições de tarefas como guia de implementação</rule>
      </manual-xml>

      <playwright>
        <rule priority="critical">SEMPRE usar playwright MCP para testes E2E</rule>
        <rule priority="critical">Execute testes E2E após implementações de frontend</rule>
        <rule priority="critical">Documente resultados em `/tasks/{TaskID}/test_results.xml`</rule>
        <rule priority="critical">Valide fluxos críticos antes de fazer commit</rule>
      </playwright>
    </mcp-usage>

    <!-- Workflow Obrigatório -->
    <mandatory-workflow>
      <step order="1">
        <action>LEIA project-manual.xml usando manual-xml MCP</action>
      </step>
      <step order="2">
        <action>CONSULTE context7 MCP para documentação das bibliotecas</action>
      </step>
      <step order="3">
        <action>USE filesystem MCP para ler código existente</action>
      </step>
      <step order="4">
        <action>EDITE arquivos usando filesystem MCP (edit_files)</action>
      </step>
      <step order="5">
        <action>VALIDE com testes locais e playwright MCP</action>
      </step>
      <step order="6">
        <action>COMMITE usando github MCP ou run_command</action>
      </step>
      <step order="7">
        <action>DOCUMENTE no README.md e /tasks/{TaskID}/</action>
      </step>
    </mandatory-workflow>

    <!-- Stack Atualizada (IMPORTANTE) -->
    <updated-stack>
      <database>
        <engine>MariaDB (não PostgreSQL)</engine>
        <orm>Prisma com provider mysql</orm>
        <connection>Usar mysql:// no DATABASE_URL</connection>
        <note>O projeto usa MariaDB, não PostgreSQL. Sempre configure:
        - Prisma provider como "mysql"
        - DATABASE_URL com mysql://
        - docker-compose com imagem mariadb</note>
      </database>

      <backend>
        <framework>NestJS</framework>
        <realtime>Socket.IO</realtime>
        <auth>JWT com bcrypt</auth>
      </backend>

      <frontend>
        <framework>Next.js com App Router</framework>
        <ui>shadcn/ui + Tailwind CSS</ui>
        <state>React hooks + Context API</state>
      </frontend>
    </updated-stack>

    <!-- Rastreabilidade -->
    <traceability>
      <task-folders>
        <rule>Sempre crie `/tasks/T{S}.{NNN}/` com:</rule>
        <file>created_files.txt</file>
        <file>changes.diff</file>
        <file>run_logs.txt</file>
        <file>test_results.xml</file>
      </task-folders>
      
      <validation>
        <rule>Sempre execute antes de commitar:</rule>
        <command>npm run lint</command>
        <command>npm run build</command>
        <command>npm test</command>
      </validation>
      
      <documentation>
        <rule>Sempre atualize README.md após completar tarefa</rule>
      </documentation>
    </traceability>
  </agent-rules>

  <!-- Convenções mantidas do XML original -->
  <conventions>
    <task-id-format>T{S}.{NNN}</task-id-format>
    <example-task-id>T1.001</example-task-id>
    <file-naming>
      <rule>Files created or modified for a task must include the task ID suffix before the extension</rule>
      <example>/frontend/src/pages/home_T1.008.tsx</example>
    </file-naming>
    <task-folder>
      <rule>For each task create a folder /tasks/T{S}.{NNN} that contains:
        created_files.txt, changes.diff (if any), run_logs.txt, test_results.xml</rule>
      <example>/tasks/T1.002/created_files.txt</example>
    </task-folder>
    <branch-format>sprint/S{S}_task_T{S}.{NNN}-{short-desc}</branch-format>
    <commit-message-format>[S{S}][T{S}.{NNN}] - short description</commit-message-format>
    <pr-format>PR: S{S} - T{S}.{NNN} - short description</pr-format>
  </conventions>

  <!-- Resto do XML mantido conforme original... -->
  <repository-structure>
    <root-files>
      <file>README.md (single living document: sprint log & status)</file>
      <file>project-manual.xml (this file, immutable source of tasks)</file>
      <file>.env.example</file>
      <file>docker-compose.yml</file>
      <file>ops/warp.yaml (workflows)</file>
      <file>tasks/ (task folders auto-created by agent)</file>
    </root-files>

    <directories>
      <dir>/frontend</dir>
      <dir>/frontend/src/pages</dir>
      <dir>/frontend/src/components</dir>
      <dir>/frontend/src/hooks</dir>
      <dir>/frontend/src/styles</dir>

      <dir>/backend</dir>
      <dir>/backend/src/modules/users</dir>
      <dir>/backend/src/modules/auth</dir>
      <dir>/backend/src/modules/chats</dir>
      <dir>/backend/src/modules/tickets</dir>
      <dir>/backend/src/modules/metrics</dir>

      <dir>/database</dir>
      <dir>/database/migrations</dir>
      <dir>/database/seed</dir>

      <dir>/ops</dir>
      <dir>/ops/mcp-server</dir>
      <dir>/ops/tests/playwright</dir>
      <dir>/tasks</dir>
    </directories>
  </repository-structure>

  <!-- Database schema (core tables) -->
  <database-schema engine="mariadb" orm="prisma">
    <table name="companies">
      <column name="id" type="uuid" pk="true" />
      <column name="name" type="varchar(255)" />
      <column name="cnpj" type="varchar(20)" />
      <column name="contact_email" type="varchar(255)" />
      <column name="created_at" type="timestamp" />
    </table>

    <table name="users">
      <column name="id" type="uuid" pk="true" />
      <column name="company_id" type="uuid" fk="companies.id" />
      <column name="email" type="varchar(255)" />
      <column name="password_hash" type="varchar(255)" />
      <column name="name" type="varchar(255)" />
      <column name="role" type="enum(user,agent,manager,admin)" />
      <column name="profile_photo_url" type="varchar(512)" nullable="true" />
      <column name="created_at" type="timestamp" />
      <index columns="company_id" />
    </table>

    <table name="conversations">
      <column name="id" type="uuid" pk="true" />
      <column name="company_id" type="uuid" fk="companies.id" />
      <column name="client_user_id" type="uuid" nullable="true" /> <!-- guest or registered -->
      <column name="agent_user_id" type="uuid" nullable="true" /> <!-- assigned agent -->
      <column name="status" type="enum(open,waiting,assigned,closed)" />
      <column name="queue_position" type="int" nullable="true" />
      <column name="started_at" type="timestamp" />
      <column name="closed_at" type="timestamp" nullable="true" />
      <column name="metadata" type="jsonb" />
    </table>

    <table name="messages">
      <column name="id" type="uuid" pk="true" />
      <column name="conversation_id" type="uuid" fk="conversations.id" />
      <column name="sender_id" type="uuid" nullable="true" /> <!-- user or system -->
      <column name="sender_type" type="enum(client,agent,system)" />
      <column name="content_json" type="jsonb" /> <!-- always store original message JSON -->
      <column name="content_text" type="text" /> <!-- plain text for quick search -->
      <column name="attachments" type="jsonb" /> <!-- list of files (url, type, size) -->
      <column name="audio_url" type="varchar(512)" nullable="true" />
      <column name="created_at" type="timestamp" />
      <index columns="conversation_id, created_at" />
    </table>

    <table name="tickets"> <!-- OS records -->
      <column name="id" type="uuid" pk="true" />
      <column name="conversation_id" type="uuid" fk="conversations.id" />
      <column name="title" type="varchar(255)" />
      <column name="description" type="text" />
      <column name="status" type="enum(open,in_progress,resolved,closed)" />
      <column name="created_by" type="uuid" />
      <column name="assigned_to" type="uuid" nullable="true" />
      <column name="created_at" type="timestamp" />
      <column name="updated_at" type="timestamp" />
    </table>

    <table name="evaluations">
      <column name="id" type="uuid" pk="true" />
      <column name="conversation_id" type="uuid" fk="conversations.id" />
      <column name="rating" type="int" />
      <column name="comment" type="text" nullable="true" />
      <column name="created_at" type="timestamp" />
    </table>

    <table name="audit_logs">
      <column name="id" type="uuid" pk="true" />
      <column name="actor_id" type="uuid" />
      <column name="action" type="varchar(255)" />
      <column name="payload" type="jsonb" />
      <column name="created_at" type="timestamp" />
    </table>

    <table name="metrics_cache">
      <column name="id" type="uuid" pk="true" />
      <column name="key" type="varchar(255)" />
      <column name="value" type="jsonb" />
      <column name="updated_at" type="timestamp" />
    </table>
  </database-schema>

  <!-- Sprints mantidos do original -->
  <sprints>
    <!-- Sprint 0: Repo init & global configs -->
    <sprint id="S0" name="Repository init & infrastructure" priority="high">
      <description>Initialize repository, configure MCPs, create README draft, add warp/workflows, docker compose and CI baseline.</description>
      <tasks>
        <task id="T0.001" title="Init repo and MCP connectivity">
          <description>Create repository, connect GitHub MCP, configure filesystem MCP, register context7 and playwright MCPs in Warp.</description>
          <actions>
            <action>Create repo skeleton (folders & root files)</action>
            <action>Create /tasks/T0.001 and record created_files.txt</action>
            <command>git init; git remote add origin &lt;your-repo-url&gt;</command>
            <validation>Confirm MCP connections reachable (ping or status)</validation>
            <post>
              <commit>[S0][T0.001] - repository skeleton and MCP registrations</commit>
              <update-readme>Add Sprints list and Task index stub</update-readme>
            </post>
          </actions>
        </task>

        <task id="T0.002" title="Create README initial & manual-xml">
          <description>Write initial README.md with sprint list, contribution guide, env description and update manual-xml pointer.</description>
          <actions>
            <action>Create README.md: include Sprints outline, commit/branch conventions, deploy commands, env vars</action>
            <action>Create this manual-xml at root (if not present)</action>
            <validation>Agent must ensure README.md includes 'How I operate' section mapping to MCP usage</validation>
            <post>
              <commit>[S0][T0.002] - README initial and manual-xml added</commit>
            </post>
          </actions>
        </task>

        <task id="T0.003" title="Ops: warp workflows, docker-compose and CI baseline">
          <description>Create ops/warp.yaml, docker-compose.yml with db service, placeholder app services and GitHub Actions CI that runs lint/build/tests.</description>
          <actions>
            <create-file>/ops/warp.yaml</create-file>
            <create-file>/docker-compose.yml</create-file>
            <create-file>/.github/workflows/ci.yml</create-file>
            <validation>CI should run npm run lint and npm test in both frontend/backend</validation>
            <post>
              <commit>[S0][T0.003] - ops workflows, docker-compose and CI baseline</commit>
            </post>
          </actions>
        </task>
      </tasks>
    </sprint>

    <!-- Sprints S1-S6 mantidos conforme original -->
    <!-- Sprint 1: Backend foundation -->
    <sprint id="S1" name="Backend foundation" priority="high">
      <description>Scaffold NestJS backend, configure Prisma, database connection, basic auth and user model.</description>
      <tasks>
        <task id="T1.001" title="Scaffold NestJS app">
          <actions>
            <command>nest new backend --package-manager npm</command>
            <create-folders>/backend/src/modules/auth /backend/src/modules/users /backend/src/modules/chats /backend/src/modules/tickets</create-folders>
            <post>
              <commit>[S1][T1.001] - nestjs scaffold</commit>
              <created-files>/backend/package.json, /backend/src/main.ts</created-files>
            </post>
          </actions>
        </task>

        <task id="T1.002" title="Prisma & DB connection">
          <actions>
            <command>npm install prisma @prisma/client --prefix backend</command>
            <command>npx prisma init --schema=./database/schema_T1.002.prisma</command>
            <create-file>/database/.env.example (DB URL template)</create-file>
            <validation>Run npx prisma migrate dev --name init in dev</validation>
            <post>
              <commit>[S1][T1.002] - prisma setup and schema init</commit>
            </post>
          </actions>
        </task>

        <task id="T1.003" title="Auth: JWT, roles and password hashing">
          <actions>
            <create-file>/backend/src/modules/auth/auth.module_T1.003.ts</create-file>
            <create-file>/backend/src/modules/auth/jwt.strategy_T1.003.ts</create-file>
            <create-file>/backend/src/modules/auth/local.strategy_T1.003.ts</create-file>
            <validation>
              <command>run backend unit tests for auth</command>
              <note>Ensure password hashed using bcrypt/argon2</note>
            </validation>
            <post>
              <commit>[S1][T1.003] - auth and roles implemented</commit>
            </post>
          </actions>
        </task>

        <task id="T1.004" title="Users & companies CRUD">
          <actions>
            <create-file>/backend/src/modules/users/users.service_T1.004.ts</create-file>
            <create-file>/backend/src/modules/users/users.controller_T1.004.ts</create-file>
            <create-file>/backend/src/modules/companies/companies.service_T1.004.ts</create-file>
            <validation>Run seed + basic CRUD tests</validation>
            <post>
              <commit>[S1][T1.004] - users and companies CRUD</commit>
            </post>
          </actions>
        </task>

        <task id="T1.005" title="Audit logging & retention job">
          <actions>
            <create-file>/backend/src/modules/audit/audit.service_T1.005.ts</create-file>
            <create-file>/backend/src/jobs/retention.job_T1.005.ts</create-file>
            <validation>Log events on user create, login, conversation assign, export</validation>
            <post>
              <commit>[S1][T1.005] - audit log and retention job</commit>
            </post>
          </actions>
        </task>
      </tasks>
    </sprint>

    <!-- Demais sprints S2-S6 seriam mantidos conforme original... -->
    <!-- Por brevidade, incluindo apenas S1 aqui -->
  </sprints>

  <!-- Routine atualizada com regras mescladas -->
  <agent-runtime-routine>
    <precondition>Before doing anything, agent must fetch and parse this manual-xml and confirm current Sprint & Task</precondition>

    <routine>
      <step-order>1</step-order>
      <step action="identify-task">Read README.md and manual-xml; determine next pending Task ID and Sprint</step>

      <step-order>2</step-order>
      <step action="create-task-folder">Create /tasks/{TaskID}/ and log created_files.txt (agent writes list of files it will create)</step>

      <step-order>3</step-order>
      <step action="consult-docs">If implementation details unclear, consult context7 MCP for library usage, API signatures, or examples</step>

      <step-order>4</step-order>
      <step action="read-existing">ALWAYS use filesystem MCP to read existing code before making changes</step>

      <step-order>5</step-order>
      <step action="implement">
        <description>Create or modify files with TaskID suffix using filesystem MCP edit_files. For every created file, append path to /tasks/{TaskID}/created_files.txt.</description>
      </step>

      <step-order>6</step-order>
      <step action="local-validate">
        <description>Run linter, unit tests (jest), and build. Example commands:
          npm run lint (root) ; npm run build --prefix backend ; npm run build --prefix frontend
        </description>
        <on-failure>
          <action>Record logs to /tasks/{TaskID}/run_logs.txt, attempt single automated fix if safe (formatting or import), re-run validations.</action>
        </on-failure>
      </step>

      <step-order>7</step-order>
      <step action="e2e-validate">
        <description>Run Playwright tests relevant to the Task via playwright MCP. Add test result to /tasks/{TaskID}/test_results.xml</description>
      </step>

      <step-order>8</step-order>
      <step action="audit-and-logs">Write audit log entry via backend audit endpoint for the action performed (create/modify).</step>

      <step-order>9</step-order>
      <step action="git-commit">
        <description>Create branch named per convention, stage changes, commit using the commit message format, open PR (if configured) and push. Example:
          git checkout -b sprint/S{S}_task_T{S}.{NNN}-short-desc
          git add .
          git commit -m "[S{S}][T{S}.{NNN}] - Implemented X"
          git push origin <branch>
        </description>
      </step>

      <step-order>10</step-order>
      <step action="update-readme">
        <description>Append a clear entry to README.md summarizing the Task: ID, short description, files added, tests run, ticket/state (done/in-progress), timestamp, commit hash and PR link (if any).</description>
        <example>
          - [S3][T3.003] - Chat UI & sockets implemented – commit abc123 – PR #12 – completed 2025-08-28
        </example>
      </step>

      <step-order>11</step-order>
      <step action="context7-note">If any library used newer than doc available, record note and timestamp in /tasks/{TaskID}/created_files.txt and in README.md for future review</step>

      <final>Move to next Task (re-read manual-xml to pick next pending task)</final>
    </routine>
  </agent-runtime-routine>

  <!-- Quality gates e final instruction mantidos -->
  <quality-gates>
    <lint>Failures must be fixed before commit unless the failure is in autogenerated file; otherwise create task to fix</lint>
    <unit-tests>Unit test coverage >= 70% for backend modules implemented in a sprint</unit-tests>
    <e2e>All Playwright critical flow tests (login, start chat, send message, download file, export xml/pdf) must pass</e2e>
    <security>CI must run dependency audit; any critical vulnerability blocks merge to main</security>
    <code-review>
      <rule>Agent must open PR and add a reviewer (human or configured bot). PR must be merged only after passing CI</rule>
    </code-review>
  </quality-gates>

  <!-- Final instruction to the agent -->
  <final-instruction>
    <text>
      You must follow this manual strictly and use ALL MCPs as specified. For each task:
      1) read this manual (manual-xml MCP)
      2) consult context7 MCP for library specifics if needed
      3) ALWAYS read existing files using filesystem MCP before editing
      4) create files/folders with TaskID suffix using filesystem MCP
      5) run local validation + playwright tests
      6) create task folder under /tasks/T{S}.{NNN} with logs and created files
      7) commit & open PR via github MCP
      8) update README.md with a structured summary
      
      CRITICAL: MariaDB is the database engine, not PostgreSQL. Always use mysql:// connections and mysql provider in Prisma.
    </text>
  </final-instruction>

</project-manual>
```

## Principais Mudanças Realizadas:

1. **Nova seção `<agent-rules>`** com as regras do agent-rules.md mescladas
2. **Regras críticas de MCP usage** organizadas por ferramenta
3. **Workflow obrigatório** detalhado passo a passo
4. **Stack atualizada** com ênfase no MariaDB (não PostgreSQL)
5. **Seção de rastreabilidade** com validação e documentação
6. **Routine atualizada** incluindo o passo obrigatório de leitura com filesystem MCP
7. **Instruções finais** reforçando o uso correto do MariaDB

As regras foram organizadas hierarquicamente mantendo a compatibilidade com a estrutura XML original, mas incorporando todas as diretrizes atualizadas do agent-rules.md.